module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
    
  ) {
  
    sig rst;                  // reset signal
    // declare modules
    counter slowclock(#SIZE(1),#DIV(24),.clk(clk),.rst(rst));
    // declare our test module
    addertest addertest(.clk(slowclock.value),.rst(rst));
    
  
   .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      // declare our module to address the segment         
      multi_seven_seg seg;
  }
  }

  

    

  always {
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    io_led = 3x{{8h00}};    // turn io LEDs off  
    
    // connect stuff to our test module
    io_led[0][7:0] = addertest.checkoff; // starting from the right if correct case is lit
    io_led[1][7:0] = addertest.err; // starting from right lit for incorrect z v n s 
     // connect error_s to segment's values
     //seg.values = {4he,4hf,4hc,4hd};
     seg.values = {addertest.err_s[15:12],addertest.err_s[11:8],addertest.err_s[7:4],addertest.err_s[3:0]};
     io_seg = ~seg.seg;          //  select needed segments, we do bitwise inversion as 0 indicates selected segment
     io_sel = ~seg.sel;           // select all needed digits

    
    //io_led[2] = addertest.counter.q;
    //io_led[1] = addertest.out[7:0];
    //io_led[2] = addertest.out[15:8];
    

//    io_led[2][7] = addertest.z;
//    io_led[2][6] = addertest.v;
//    io_led[2][5] = addertest.n;

}